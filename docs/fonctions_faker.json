{
  "aba": "Generate an ABA routing transit number.",
  "address": ":example: '791 Crist Parks, Sashabury, IL 86039-9874'",
  "am_pm": ":sample:",
  "android_platform_token": "Generate an Android platform token used in user agent strings.",
  "bank_country": "Generate the bank provider's ISO 3166-1 alpha-2 country code.",
  "bban": "Generate a Basic Bank Account Number (BBAN).",
  "binary": "Generate a random binary blob of ``length`` bytes.\n\nIf this faker instance has been seeded, performance will be signficiantly reduced, to conform\nto the seeding.\n\n:sample: length=64",
  "boolean": "Generate a random boolean value based on ``chance_of_getting_true``.\n\n:sample: chance_of_getting_true=25\n:sample: chance_of_getting_true=50\n:sample: chance_of_getting_true=75",
  "bothify": "Generate a string with each placeholder in ``text`` replaced according to the following rules:\n\n- Number signs ('#') are replaced with a random digit (0 to 9).\n- Percent signs ('%') are replaced with a random non-zero digit (1 to 9).\n- Dollar signs ('$') are replaced with a random digit above two (2 to 9).\n- Exclamation marks ('!') are replaced with a random digit or an empty string.\n- At symbols ('@') are replaced with a random non-zero digit or an empty string.\n- Question marks ('?') are replaced with a random character from ``letters``.\n\nBy default, ``letters`` contains all ASCII letters, uppercase and lowercase.\n\nUnder the hood, this method uses :meth:`numerify() <faker.providers.BaseProvider.numerify>` and\nand :meth:`lexify() <faker.providers.BaseProvider.lexify>` to generate random values for number\nsigns and question marks respectively.\n\n:sample: letters='ABCDE'\n:sample: text='Product Number: ????-########'\n:sample: text='Product Number: ????-########', letters='ABCDE'\n:sample: text='Order: ##??-$'",
  "bs": ":example: 'integrate extensible convergence'",
  "building_number": ":example: '791'",
  "catch_phrase": ":example: 'Robust full-range hub'",
  "century": ":sample:",
  "chrome": "Generate a Chrome web browser user agent string.",
  "city": ":example: 'Sashabury'",
  "city_suffix": ":example: 'town'",
  "color": "Generate a color in a human-friendly way.\n\nUnder the hood, this method first creates a color represented in the HSV\ncolor model and then converts it to the desired ``color_format``. The\nargument ``hue`` controls the H value according to the following\nrules:\n\n- If the value is a number from ``0`` to ``360``, it will serve as the H\n  value of the generated color.\n- If the value is a tuple/list of 2 numbers from 0 to 360, the color's H\n  value will be randomly selected from that range.\n- If the value is a valid string, the color's H value will be randomly\n  selected from the H range corresponding to the supplied string. Valid\n  values are ``'monochrome'``, ``'red'``, ``'orange'``, ``'yellow'``,\n  ``'green'``, ``'blue'``, ``'purple'``, and ``'pink'``.\n\nThe argument ``luminosity`` influences both S and V values and is\npartially affected by ``hue`` as well. The finer details of this\nrelationship are somewhat involved, so please refer to the source code\ninstead if you wish to dig deeper. To keep the interface simple, this\nargument either can be omitted or can accept the following string\nvalues:``'bright'``, ``'dark'``, ``'light'``, or ``'random'``.\n\nThe argument ``color_format`` controls in which color model the color is\nrepresented. Valid values are ``'hsv'``, ``'hsl'``, ``'rgb'``, or\n``'hex'`` (default).\n\n:sample: hue='red'\n:sample: luminosity='light'\n:sample: hue=(100, 200), color_format='rgb'\n:sample: hue='orange', luminosity='bright'\n:sample: hue=135, luminosity='dark', color_format='hsv'\n:sample: hue=(300, 20), luminosity='random', color_format='hsl'",
  "color_hsl": "Generate a HSL color tuple in a human-friendly way.",
  "color_hsv": "Generate a HSV color tuple in a human-friendly way.",
  "color_name": "Generate a color name.",
  "color_rgb": "Generate a RGB color tuple of integers in a human-friendly way.",
  "color_rgb_float": "Generate a RGB color tuple of floats in a human-friendly way.",
  "company": ":example: 'Acme Ltd'",
  "company_suffix": ":example: 'Ltd'",
  "coordinate": "Optionally center the coord and pick a point within radius.",
  "credit_card_expire": "Generate a credit card expiry date.\n\nThis method uses |date_time_between| under the hood to generate the\nexpiry date, so the ``start`` and ``end`` arguments work in the same way\nhere as it would in that method. For the actual formatting of the expiry\ndate, |strftime| is used and ``date_format`` is simply passed\nto that method.",
  "credit_card_full": "Generate a set of credit card details.",
  "credit_card_number": "Generate a valid credit card number.",
  "credit_card_provider": "Generate a credit card provider name.",
  "credit_card_security_code": "Generate a credit card security code.",
  "csv": "Generate random comma-separated values.\n\nFor more information on the different arguments of this method, please refer to\n:meth:`dsv() <faker.providers.misc.Provider.dsv>` which is used under the hood.\n\n:sample: data_columns=('{{name}}', '{{address}}'), num_rows=10, include_row_ids=False\n:sample: header=('Name', 'Address', 'Favorite Color'),\n        data_columns=('{{name}}', '{{address}}', '{{safe_color_name}}'),\n        num_rows=10, include_row_ids=True",
  "currency_symbol": ":example: $",
  "date": "Get a date string between January 1, 1970 and now.\n\n:param pattern: Format of the date (year-month-day by default)\n:param end_datetime: A ``DateParseType``. Defaults to the current date and time\n\n:sample:\n:sample: pattern='%m/%d/%Y'\n:sample: end_datetime='+1w'",
  "date_between": "Get a Date object based on a random date between two given dates.\nAccepts date strings that can be recognized by strtotime().\n\n:param start_date: A ``DateParseType``. Defaults to 30 years ago\n:param end_date: A ``DateParseType``. Defaults to ``\"today\"``\n\n:sample:\n:sample: start_date='-1w'\n:sample: start_date=\"-1y\", end_date=\"+1w\"",
  "date_between_dates": "Get a random date between the two given dates.\n\n:param date_start: A ``DateParseType``. Defaults to the UNIX epoch\n:param date_end: A ``DateParseType``. Defaults to the current date and time\n\n:sample:",
  "date_object": "Get a date object between January 1, 1970 and now\n\n:param end_datetime: A ``DateParseType``. Defaults to the current date and time\n\n:sample:\n:sample: end_datetime='+1w'",
  "date_of_birth": "Generate a random date of birth represented as a Date object,\nconstrained by optional miminimum_age and maximum_age\nparameters.\n\n:param tzinfo: Defaults to None.\n:param minimum_age: Defaults to ``0``.\n:param maximum_age: Defaults to ``115``.\n\n:sample:\n:sample: minimum_age=30, maximum_age=50",
  "date_this_century": "Gets a Date object for the current century.\n\n:param before_today: include days in current century before today. Defaults to True\n:param after_today: include days in current century after today. Defaults to False\n\n:sample:\n:sample: before_today=False, after_today=True",
  "date_this_decade": "Gets a Date object for the decade year.\n\n:param before_today: include days in current decade before today. Defaults to True\n:param after_today: include days in current decade after today. Defaults to False\n\n:sample:\n:sample: before_today=False, after_today=True",
  "date_this_month": "Gets a Date object for the current month.\n\n:param before_today: include days in current month before today. Defaults to True\n:param after_today: include days in current month after today. Defaults to False\n\n:sample:\n:sample: before_today=False, after_today=True",
  "date_this_year": "Gets a Date object for the current year.\n\n:param before_today: include days in current year before today. Defaults to True\n:param after_today: include days in current year after today. Defaults to False\n\n:sample:\n:sample: before_today=False, after_today=True",
  "date_time": "Get a datetime object for a date between January 1, 1970 and a specified end_datetime\n\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n:param end_datetime: A ``DateParseType``. Defaults to the current date and time\n\n:sample:",
  "date_time_ad": "Get a datetime object for a date between January 1, 0001 and now\n\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n:param end_datetime: A ``DateParseType``. Defaults to the current date and time\n:param start_datetime: A ``DateParseType``. Defaults to UNIX timestamp ``-62135596800``,\nequivalent to 0001-01-01 00:00:00 UTC\n\n:sample:",
  "date_time_between": "Get a datetime object based on a random date between two given dates.\nAccepts date strings that can be recognized by strtotime().\n\n:param start_date: A ``DateParseType``. Defaults to 30 years ago\n:param end_date: A ``DateParseType``. Defaults to ``\"now\"``\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:",
  "date_time_between_dates": "Get a random datetime between the two given datetimes.\n\n:param datetime_start: A ``DateParseType``. Defaults to the UNIX epoch\n:param datetime_end: A ``DateParseType``. Defaults to the current date and time\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:\n:sample: datetime_start='-30y', datetime_end='now'\n:sample: datetime_start='now', datetime_end='+1y'",
  "date_time_this_century": "Gets a datetime object for the current century.\n\n:param before_now: include days in current century before today. Defaults to True\n:param after_now: include days in current century after today. Defaults to False\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:\n:sample: before_now=False, after_now=True",
  "date_time_this_decade": "Gets a datetime object for the decade year.\n\n:param before_now: include days in current decade before today. Defaults to True\n:param after_now: include days in current decade after today. Defaults to False\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:\n:sample: before_now=False, after_now=True",
  "date_time_this_month": "Gets a datetime object for the current month.\n\n:param before_now: include days in current month before today. Defaults to True\n:param after_now: include days in current month after today. Defaults to False\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:\n:sample: before_now=False, after_now=True",
  "date_time_this_year": "Gets a datetime object for the current year.\n\n:param before_now: include days in current year before today. Defaults to True\n:param after_now: include days in current year after today. Defaults to False\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:\n:sample: before_now=False, after_now=True",
  "day_of_month": ":sample:",
  "day_of_week": ":sample:",
  "del_arguments": "Delete an argument from an argument group or the entire argument group.\nUsed in conjunction with the set_arguments() method.\n\ngenerator.del_arguments('small')\ngenerator.del_arguments('small', 'max_value')",
  "dga": "Generates a domain name by given date\nhttps://en.wikipedia.org/wiki/Domain_generation_algorithm\n\n:type year: int\n:type month: int\n:type day: int\n:type tld: str\n:type length: int\n:rtype: str",
  "doi": "Generate a valid Digital Object Identifier (DOI).\nFormat: 10.{4-9 digits}/{alphanumeric string}\nEg: 10.1000/xyz123\n\n:sample:",
  "domain_name": "Produce an Internet domain name with the specified number of\nsubdomain levels.\n\n>>> domain_name()\nnichols-phillips.com\n>>> domain_name(2)\nwilliamson-hopkins.jackson.com",
  "dsv": "Generate random delimiter-separated values.\n\nThis method's behavior share some similarities with ``csv.writer``. The ``dialect`` and\n``**fmtparams`` arguments are the same arguments expected by ``csv.writer`` to control its\nbehavior, and instead of expecting a file-like object to where output will be written, the\noutput is controlled by additional keyword arguments and is returned as a string.\n\nThe ``dialect`` argument defaults to ``'faker-csv'`` which is the name of a ``csv.excel``\nsubclass with full quoting enabled.\n\nThe ``header`` argument expects a list or a tuple of strings that will serve as the header row\nif supplied. The ``data_columns`` argument expects a list or a tuple of string tokens, and these\nstring tokens will be passed to  :meth:`pystr_format() <faker.providers.python.Provider.pystr_format>`\nfor data generation. Argument Groups are used to pass arguments to the provider methods.\nBoth ``header`` and ``data_columns`` must be of the same length.\n\nExample:\n    fake.set_arguments('top_half', {'min_value': 50, 'max_value': 100})\n    fake.dsv(data_columns=('{{ name }}', '{{ pyint:top_half }}'))\n\nThe ``num_rows`` argument controls how many rows of data to generate, and the ``include_row_ids``\nargument may be set to ``True`` to include a sequential row ID column.\n\n:sample: dialect='excel', data_columns=('{{name}}', '{{address}}')\n:sample: dialect='excel-tab', data_columns=('{{name}}', '{{address}}'), include_row_ids=True\n:sample: data_columns=('{{name}}', '{{address}}'), num_rows=5, delimiter='$'",
  "ean": "Generate an EAN barcode of the specified ``length``.\n\nThe value of ``length`` can only be ``8`` or ``13`` (default) which will\ncreate an EAN-8 or an EAN-13 barcode respectively.\n\nIf a value for ``prefixes`` is specified, the result will begin with one\nof the sequences in ``prefixes``.\n\n:sample: length=13\n:sample: length=8\n:sample: prefixes=('00',)\n:sample: prefixes=('45', '49')",
  "ean13": "Generate an EAN-13 barcode.\n\nIf ``leading_zero`` is ``True``, the leftmost digit of the barcode will\nbe set to ``0``. If ``False``, the leftmost digit cannot be ``0``. If\n``None`` (default), the leftmost digit can be any digit.\n\nIf a value for ``prefixes`` is specified, the result will begin with one\nof the sequences in ``prefixes`` and will ignore ``leading_zero``.\n\nThis method uses the standard barcode provider's |ean13| under the\nhood with the ``prefixes`` argument set to the correct value to attain\nthe behavior described above.\n\n.. note::\n   EAN-13 barcode that starts with a zero can be converted to UPC-A\n   by dropping the leading zero. This may cause problems with readers\n   that treat all of these code as UPC-A codes and drop the first digit\n   when reading it.\n\n   You can set the argument ``prefixes`` ( or ``leading_zero`` for\n   convenience) explicitly to avoid or to force the generated barcode to\n   start with a zero. You can also generate actual UPC-A barcode with\n   |EnUsBarcodeProvider.upc_a|.\n\n:sample:\n:sample: leading_zero=False\n:sample: leading_zero=True\n:sample: prefixes=('00',)\n:sample: prefixes=('45', '49')",
  "ean8": "Generate an EAN-8 barcode.\n\nThis method uses |ean| under the hood with the ``length`` argument\nexplicitly set to ``8``.\n\nIf a value for ``prefixes`` is specified, the result will begin with one\nof the sequences in ``prefixes``.\n\n:sample:\n:sample: prefixes=('00',)\n:sample: prefixes=('45', '49')",
  "ein": "Generate a random United States Employer Identification Number (EIN).\n\nAn United States An Employer Identification Number (EIN) is\nalso known as a Federal Tax Identification Number, and is\nused to identify a business entity. EINs follow a format of a\ntwo-digit prefix followed by a hyphen and a seven-digit sequence:\n##-######\n\nhttps://www.irs.gov/businesses/small-businesses-self-employed/employer-id-numbers",
  "emoji": ":example: '😉'",
  "enum": "Returns a random enum of the provided input `Enum` type.\n\n:param enum_cls: The `Enum` type to produce the value for.\n:returns: A randomly selected enum value.",
  "file_extension": "Generate a file extension under the specified ``category``.\n\nIf ``category`` is ``None``, a random category will be used. The list of\nvalid categories include: ``'audio'``, ``'image'``, ``'office'``,\n``'text'``, and ``'video'``.\n\n:sample:\n:sample: category='image'",
  "file_name": "Generate a random file name with extension.\n\nIf ``extension`` is ``None``, a random extension will be created\nunder the hood using |file_extension| with the specified\n``category``. If a value for ``extension`` is provided, the\nvalue will be used instead, and ``category`` will be ignored.\nThe actual name part itself is generated using |word|. If\nextension is an empty string then no extension will be added,\nand file_name will be the same as |word|.\n\n:sample: size=10\n:sample: category='audio'\n:sample: extension='abcdef'\n:sample: category='audio', extension='abcdef'\n:sample: extension=''",
  "file_path": "Generate an pathname to a file.\n\nThis method uses |file_name| under the hood to generate the file\nname itself, and ``depth`` controls the depth of the directory\npath, and |word| is used under the hood to generate the\ndifferent directory names.\n\nIf ``absolute`` is ``True`` (default), the generated path starts\nwith ``/`` and is absolute. Otherwise, the generated path is\nrelative.\n\nIf used, ``extension`` can be either a string, forcing that\nextension, a sequence of strings (one will be picked at random),\nor an empty sequence (the path will have no extension). Default\nbehaviour is the same as |file_name|\n\nif ``file_system`` is set (default=\"linux\"), the generated path uses\nspecified file system path standard, the list of valid file systems include:\n``'windows'``, ``'linux'``.\n\n:sample: size=10\n:sample: depth=3\n:sample: depth=5, category='video'\n:sample: depth=5, category='video', extension='abcdef'\n:sample: extension=[]\n:sample: extension=''\n:sample: extension=[\"a\", \"bc\", \"def\"]\n:sample: depth=5, category='video', extension='abcdef', file_system='windows'",
  "firefox": "Generate a Mozilla Firefox web browser user agent string.",
  "fixed_width": "Generate random fixed width values.\n\nUsing a list of tuple records that is passed as ``data_columns``, that\ndefines the structure that will be generated. Arguments within the\nrecord are provider specific, and should be a dictionary that will be\npassed to the provider method.\n\nData Column List format\n    [('field width', 'definition', {'arguments'})]\n\nThe definition can be 'provider', 'provider:argument_group', tokenized\n'string {{ provider:argument_group }}' that is passed to the python\nprovider method pystr_format() for generation, or a fixed '@word'.\nUsing Lists, Tuples, and Dicts as a definition for structure.\n\nArgument Groups can be used to pass arguments to the provider methods,\nbut will override the arguments supplied in the tuple record.\n\nExample:\n    fake.set_arguments('top_half', {'min_value': 50, 'max_value': 100})\n    fake.fixed_width(data_columns=[(20, 'name'), (3, 'pyint:top_half')])\n\n:param data_columns: specification for the data structure\n:type data_columns: list\n:param num_rows: number of rows the generator will yield\n:type num_rows: int\n:param align: positioning of the value. (left, middle, right)\n:type align: str\n:return: Serialized Fixed Width data\n:rtype: str\n\n:sample: data_columns=[(20, 'name'), (3, 'pyint', {'min_value': 50,\n        'max_value': 100})], align='right', num_rows=2",
  "format": "This is a secure way to make a fake from another Provider.",
  "future_date": "Get a Date object based on a random date between 1 day from now and a\ngiven date.\n\n:param end_date: A ``DateParseType``. Defaults to ``\"+30d\"``\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:\n:sample: end_date='+1y'",
  "future_datetime": "Get a datetime object based on a random date between 1 second form now\nand a given date.\n\n:param end_date: A ``DateParseType``. Defaults to ``\"+30d\"``\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:\n:sample: end_date='+1y'",
  "get_arguments": "Get the value of an argument configured within a argument group, or\nthe entire group as a dictionary. Used in conjunction with the\nset_arguments() method.\n\ngenerator.get_arguments('small', 'max_value')\ngenerator.get_arguments('small')",
  "get_providers": "Returns added providers.",
  "get_words_list": "Get list of words.\n\n``ext_word_list`` is a parameter that allows the user to provide a list\nof words to be used instead of the built-in word list. If ``ext_word_list``\nis provided, then the value of ``part_of_speech`` is ignored.\n\n``part_of_speech`` is a parameter that defines to what part of speech\nthe returned word belongs. If ``ext_word_list`` is not ``None``, then\n``part_of_speech`` is ignored. If the value of ``part_of_speech`` does\nnot correspond to an existent part of speech according to the set locale,\nthen an exception is raised.\n\n:sample: part_of_speech=\"abc\", ext_word_list=['abc', 'def', 'ghi', 'jkl']\n:sample: part_of_speech=\"abc\"\n:sample: ext_word_list=['abc', 'def', 'ghi', 'jkl']\n\n.. warning::\n    Depending on the length of a locale provider's built-in word list or\n    on the length of ``ext_word_list`` if provided, a large ``nb`` can\n    exhaust said lists if ``unique`` is ``True``, raising an exception.",
  "hex_color": "Generate a color formatted as a hex triplet.",
  "hexify": "Generate a string with each circumflex ('^') in ``text``\nreplaced with a random hexadecimal character.\n\nBy default, ``upper`` is set to False. If set to ``True``, output\nwill be formatted using uppercase hexadecimal characters.\n\n:sample: text='MAC Address: ^^:^^:^^:^^:^^:^^'\n:sample: text='MAC Address: ^^:^^:^^:^^:^^:^^', upper=True",
  "hostname": "Produce a hostname with specified number of subdomain levels.\n\n>>> hostname()\ndb-01.nichols-phillips.com\n>>> hostname(0)\nlaptop-56\n>>> hostname(2)\nweb-12.williamson-hopkins.jackson.com",
  "http_method": "Returns random HTTP method\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods\n\n:rtype: str",
  "http_status_code": "Returns random HTTP status code\nhttps://www.rfc-editor.org/rfc/rfc9110#name-status-codes\n:param include_unassigned: Whether to include status codes which have\n    not yet been assigned or are unused\n\n:return: a random three digit status code\n:rtype: int\n\n:example: 404",
  "iana_id": "Returns IANA Registrar ID\nhttps://www.iana.org/assignments/registrar-ids/registrar-ids.xhtml\n\n:rtype: str",
  "iban": "Generate an International Bank Account Number (IBAN).",
  "image": "Generate an image and draw a random polygon on it using the Python Image Library.\nWithout it installed, this provider won't be functional. Returns the bytes representing\nthe image in a given format.\n\nThe argument ``size`` must be a 2-tuple containing (width, height) in pixels. Defaults to 256x256.\n\nThe argument ``image_format`` can be any valid format to the underlying library like ``'tiff'``,\n``'jpeg'``, ``'pdf'`` or ``'png'`` (default). Note that some formats need present system libraries\nprior to building the Python Image Library.\nRefer to https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html for details.\n\nThe arguments ``hue`` and ``luminosity`` are the same as in the color provider and are simply forwarded to\nit to generate both the background and the shape colors. Therefore, you can ask for a \"dark blue\" image, etc.\n\n:sample: size=(2, 2), hue='purple', luminosity='bright', image_format='pdf'\n:sample: size=(16, 16), hue=[90,270], image_format='ico'",
  "image_url": "Returns URL to placeholder image\nExample: http://placehold.it/640x480\n\n:param width: Optional image width\n:param height: Optional image height\n:param placeholder_url: Optional template string of image URLs from custom\n    placeholder service. String must contain ``{width}`` and ``{height}``\n    placeholders, eg: ``https:/example.com/{width}/{height}``.\n:rtype: str",
  "internet_explorer": "Generate an IE web browser user agent string.",
  "invalid_ssn": "Generate a random invalid United States Social Security Identification Number (SSN).\n\nInvalid SSNs have the following characteristics:\nCannot begin with the number 9\nCannot begin with 666 in positions 1 - 3\nCannot begin with 000 in positions 1 - 3\nCannot contain 00 in positions 4 - 5\nCannot contain 0000 in positions 6 - 9\n\nhttps://www.ssa.gov/kc/SSAFactSheet--IssuingSSNs.pdf\n\nAdditionally, return an invalid SSN that is NOT a valid ITIN by excluding certain ITIN related \"group\" values",
  "ios_platform_token": "Generate an iOS platform token used in user agent strings.",
  "ipv4": "Returns a random IPv4 address or network with a valid CIDR.\n\n:param network: Network address\n:param address_class: IPv4 address class (a, b, or c)\n:param private: Public or private\n:returns: IPv4",
  "ipv4_network_class": "Returns a IPv4 network class 'a', 'b' or 'c'.\n\n:returns: IPv4 network class",
  "ipv4_private": "Returns a private IPv4.\n\n:param network: Network address\n:param address_class: IPv4 address class (a, b, or c)\n:returns: Private IPv4",
  "ipv4_public": "Returns a public IPv4 excluding private blocks.\n\n:param network: Network address\n:param address_class: IPv4 address class (a, b, or c)\n:returns: Public IPv4",
  "ipv6": "Produce a random IPv6 address or network with a valid CIDR",
  "iso8601": "Get an ISO 8601 string for a datetime between the UNIX epoch and now.\n\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n:param end_datetime: A ``DateParseType``. Defaults to the current date and time\n:param sep: separator between date and time, defaults to 'T'\n:param timespec: format specifier for the time part, defaults to 'auto' - see datetime.isoformat() documentation\n\n:sample:",
  "itin": "Generate a random United States Individual Taxpayer Identification Number (ITIN).\n\nAn United States Individual Taxpayer Identification Number\n(ITIN) is a tax processing number issued by the Internal\nRevenue Service. It is a nine-digit number that always begins\nwith the number 9 and has a range of 70-88 in the fourth and\nfifth digit. Effective April 12, 2011, the range was extended\nto include 900-70-0000 through 999-88-9999, 900-90-0000\nthrough 999-92-9999 and 900-94-0000 through 999-99-9999.\nhttps://www.irs.gov/individuals/international-taxpayers/general-itin-information",
  "json": "Generate random JSON structure values.\n\nUsing a dictionary or list of records that is passed as ``data_columns``,\ndefine the structure that is used to build JSON structures.  For complex\ndata structures it is recommended to use the dictionary format.\n\nData Column Dictionary format:\n    {'key name': 'definition'}\n\nThe definition can be 'provider', 'provider:argument_group', tokenized\n'string {{ provider:argument_group }}' that is passed to the python\nprovider method pystr_format() for generation, or a fixed '@word'.\nUsing Lists, Tuples, and Dicts as a definition for structure.\n\nExample:\n    fake.set_arguments('top_half', {'min_value': 50, 'max_value': 100})\n    fake.json(data_columns={'Name': 'name', 'Score': 'pyint:top_half'})\n\nData Column List format:\n    [('key name', 'definition', {'arguments'})]\n\nWith the list format the definition can be a list of records, to create\na list within the structure data.  For literal entries within the list,\nset the 'field_name' to None.\n\n:param data_columns: specification for the data structure\n:type data_columns: dict\n:param num_rows: number of rows the returned\n:type num_rows: int\n:param indent: number of spaces to indent the fields\n:type indent: int\n:param cls: optional json encoder to use for non-standard objects such as datetimes\n:type cls: json.JSONEncoder\n:return: Serialized JSON data\n:rtype: str\n\n:sample: data_columns={'Spec': '@1.0.1', 'ID': 'pyint',\n        'Details': {'Name': 'name', 'Address': 'address'}}, num_rows=2\n:sample: data_columns={'Candidates': ['name', 'name', 'name']},\n        num_rows=1\n:sample: data_columns=[('Name', 'name'), ('Points', 'pyint',\n        {'min_value': 50, 'max_value': 100})], num_rows=1",
  "json_bytes": "Generate random JSON structure and return as bytes.\n\nFor more information on the different arguments of this method, refer to\n:meth:`json() <faker.providers.misc.Provider.json>` which is used under the hood.",
  "language_code": "Generate a random i18n language code (e.g. en).",
  "language_name": "Generate a random i18n language name (e.g. English).",
  "lexify": "Generate a string with each question mark ('?') in ``text``\nreplaced with a random character from ``letters``.\n\nBy default, ``letters`` contains all ASCII letters, uppercase and lowercase.\n\n:sample: text='Random Identifier: ??????????'\n:sample: text='Random Identifier: ??????????', letters='ABCDE'",
  "license_plate": "Generate a license plate.",
  "linux_platform_token": "Generate a Linux platform token used in user agent strings.",
  "linux_processor": "Generate a Linux processor token used in user agent strings.",
  "local_latlng": "Returns a location known to exist on land in a country specified by `country_code`.\nDefaults to 'en_US'. See the `land_coords` list for available locations/countries.",
  "locale": "Generate a random underscored i18n locale code (e.g. en_US).",
  "localized_ean": "Generate a localized EAN barcode of the specified ``length``.\n\nThe value of ``length`` can only be ``8`` or ``13`` (default) which will\ncreate an EAN-8 or an EAN-13 barcode respectively.\n\nThis method uses the standard barcode provider's |ean| under the hood\nwith the ``prefixes`` argument explicitly set to ``local_prefixes`` of\na localized barcode provider implementation.\n\n:sample:\n:sample: length=13\n:sample: length=8",
  "localized_ean13": "Generate a localized EAN-13 barcode.\n\nThis method uses |localized_ean| under the hood with the ``length``\nargument explicitly set to ``13``.",
  "localized_ean8": "Generate a localized EAN-8 barcode.\n\nThis method uses |localized_ean| under the hood with the ``length``\nargument explicitly set to ``8``.",
  "location_on_land": "Returns a random tuple specifying a coordinate set guaranteed to exist on land.\nFormat is `(latitude, longitude, place name, two-letter country code, timezone)`\nPass `coords_only` to return coordinates without metadata.",
  "mac_address": "Returns a random MAC address.\n\n:param multicast: Multicast address\n:returns: MAC Address",
  "mac_platform_token": "Generate a MacOS platform token used in user agent strings.",
  "mac_processor": "Generate a MacOS processor token used in user agent strings.",
  "md5": "Generate a random MD5 hash.\n\nIf ``raw_output`` is ``False`` (default), a hexadecimal string representation of the MD5 hash\nwill be returned. If ``True``, a ``bytes`` object representation will be returned instead.\n\n:sample: raw_output=False\n:sample: raw_output=True",
  "military_apo": ":example: 'PSC 5394 Box 3492",
  "military_dpo": ":example: 'Unit 3333 Box 9342'",
  "military_ship": ":example: 'USS'",
  "military_state": ":example: 'APO'",
  "mime_type": "Generate a mime type under the specified ``category``.\n\nIf ``category`` is ``None``, a random category will be used. The list of\nvalid categories include ``'application'``, ``'audio'``, ``'image'``,\n``'message'``, ``'model'``, ``'multipart'``, ``'text'``, and\n``'video'``.\n\n:sample:\n:sample: category='application'",
  "month": ":sample:",
  "month_name": ":sample:",
  "msisdn": "https://en.wikipedia.org/wiki/MSISDN",
  "name": ":example: 'John Doe'",
  "nic_handle": "Returns NIC Handle ID\nhttps://www.apnic.net/manage-ip/using-whois/guide/person/\n\n:rtype: str",
  "nic_handles": "Returns NIC Handle ID list\n\n:rtype: list[str]",
  "null_boolean": "Generate ``None``, ``True``, or ``False``, each with equal probability.",
  "numerify": "Generate a string with each placeholder in ``text`` replaced according\nto the following rules:\n\n- Number signs ('#') are replaced with a random digit (0 to 9).\n- Percent signs ('%') are replaced with a random non-zero digit (1 to 9).\n- Dollar signs ('$') are replaced with a random digit above two (2 to 9).\n- Exclamation marks ('!') are replaced with a random digit or an empty string.\n- At symbols ('@') are replaced with a random non-zero digit or an empty string.\n\nUnder the hood, this method uses :meth:`random_digit() <faker.providers.BaseProvider.random_digit>`,\n:meth:`random_digit_not_null() <faker.providers.BaseProvider.random_digit_not_null>`,\n:meth:`random_digit_or_empty() <faker.providers.BaseProvider.random_digit_or_empty>`,\nand :meth:`random_digit_not_null_or_empty() <faker.providers.BaseProvider.random_digit_not_null_or_empty>`\nto generate the random values.\n\n:sample: text='Intel Core i%-%%##K vs AMD Ryzen % %%##X'\n:sample: text='!!! !!@ !@! !@@ @!! @!@ @@! @@@'",
  "opera": "Generate an Opera web browser user agent string.",
  "paragraph": "Generate a paragraph.\n\nThe ``nb_sentences`` argument controls how many sentences the paragraph\nwill contain, and setting ``variable_nb_sentences`` to ``False`` will\ngenerate the exact amount, while setting it to ``True`` (default) will\ngenerate a random amount (+/-40%, minimum of 1) using\n|randomize_nb_elements|.\n\nUnder the hood, |sentences| is used to generate the sentences, so the\nargument ``ext_word_list`` works in the same way here as it would in\nthat method.\n\n:sample: nb_sentences=5\n:sample: nb_sentences=5, variable_nb_sentences=False\n:sample: nb_sentences=5, ext_word_list=['abc', 'def', 'ghi', 'jkl']\n:sample: nb_sentences=5, variable_nb_sentences=False,\n         ext_word_list=['abc', 'def', 'ghi', 'jkl']",
  "paragraphs": "Generate a list of paragraphs.\n\nThis method uses |paragraph| under the hood to generate paragraphs, and\nthe ``nb`` argument controls exactly how many sentences the list will\ncontain. The ``ext_word_list`` argument works in exactly the same way\nas well.\n\n:sample: nb=5\n:sample: nb=5, ext_word_list=['abc', 'def', 'ghi', 'jkl']",
  "parse": "Replaces tokens like '{{ tokenName }}' or '{{tokenName}}' in a string with\nthe result from the token method call. Arguments can be parsed by using an\nargument group. For more information on the use of argument groups, please\nrefer to the set_arguments() method.\n\nExample:\n\ngenerator.set_arguments('red_rgb', {'hue': 'red', 'color_format': 'rgb'})\ngenerator.set_arguments('small', 'max_value', 10)\n\ngenerator.parse('{{ color:red_rgb }} - {{ pyint:small }}')",
  "passport_dates": "Generates a formatted date of birth, issue, and expiration dates.\nissue and expiration dates are conditioned to fall within U.S. standards of 5 and 10 year expirations\n\n\nThe ``birthday`` argument is a datetime.date object representing a date of birth.\n\nSources:\n\n-https://travel.state.gov/content/travel/en/passports/passport-help/faqs.html",
  "passport_dob": "Generate a datetime date of birth.",
  "passport_full": "Generates a formatted sting with US Passport information",
  "passport_gender": "Generates a string representing the gender displayed on a passport\n\nSources:\n\n- https://williamsinstitute.law.ucla.edu/publications/x-gender-markers-passports/",
  "passport_number": "Generate a passport number by replacing tokens to be alphanumeric",
  "passport_owner": "Generate a given_name and surname for a passport owner\nThe ``gender`` argument is the gender marker of a passport owner, which is a one character string\nthat is either male, female, or non-binary.",
  "password": "Generate a random password of the specified ``length``.\n\nThe arguments ``special_chars``, ``digits``, ``upper_case``, and ``lower_case`` control\nwhat category of characters will appear in the generated password. If set to ``True``\n(default), at least one character from the corresponding category is guaranteed to appear.\nSpecial characters are characters from ``!@#$%^&*()_+``, digits are characters from\n``0123456789``, and uppercase and lowercase characters are characters from the ASCII set of\nletters.\n\n:sample: length=12\n:sample: length=40, special_chars=False, upper_case=False",
  "past_date": "Get a Date object based on a random date between a given date and 1 day\nago.\n\n:param start_date: A ``DateParseType``. Defaults to ``\"-30d\"``\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:\n:sample: start_date='-1y'",
  "past_datetime": "Get a datetime object based on a random date between a given date and 1\nsecond ago.\n\n:param start_date: A ``DateParseType``. Defaults to ``\"-30d\"``\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n:example: datetime('1999-02-02 11:42:52')\n\n:sample:\n:sample: end_date='+1y'",
  "port_number": "Returns a network port number\nhttps://tools.ietf.org/html/rfc6335\n\n:param is_system: System or well-known ports\n:param is_user: User or registered ports\n:param is_dynamic: Dynamic / private / ephemeral ports\n:rtype: int",
  "postcode": ":example: 86039-9874",
  "postcode_in_state": ":returns: A random postcode within the provided state abbreviation\n\n:param state_abbr: A state abbreviation",
  "profile": "Generates a complete profile.\nIf \"fields\" is not empty, only the fields in the list will be returned",
  "psv": "Generate random pipe-separated values.\n\nFor more information on the different arguments of this method, please refer to\n:meth:`dsv() <faker.providers.misc.Provider.dsv>` which is used under the hood.\n\n:sample: data_columns=('{{name}}', '{{address}}'), num_rows=10, include_row_ids=False\n:sample: header=('Name', 'Address', 'Favorite Color'),\n        data_columns=('{{name}}', '{{address}}', '{{safe_color_name}}'),\n        num_rows=10, include_row_ids=True",
  "pybool": "Generates a random boolean, optionally biased towards `True` or `False`.\n\n:truth_probability: Probability of generating a `True` value. Must be between `0` and `100` inclusive'.\n:return: Random boolean.\n:raises ValueError: If invalid `truth_probability` is provided.",
  "pydict": "Returns a dictionary.\n\n:nb_elements: number of elements for dictionary\n:variable_nb_elements: is use variable number of elements for dictionary\n:value_types: type of dictionary values",
  "pyobject": "Generates a random object passing the type desired.\n\n:object_type: the type of the object to generate.\n:return: the random object generated.\n:raises ValueError: if the object type passed is not supported",
  "pystr": "Generates a random string of upper and lowercase letters.\n\n:param min_chars: minimum length of the random part.\n:param max_chars: maximum length of the random part.\n:param prefix: an optional prefix to prepend to the random string.\n:param suffix: an optional suffix to append to the random string.\n:return: Random of random length between min and max characters.",
  "pytimezone": "Generate a random timezone (see ``faker.timezone`` for any args)\nand return a Python object usable as a ``tzinfo`` for ``datetime``\nor other fakers.\n\n:sample:",
  "random_choices": "Generate a list of objects randomly sampled from ``elements`` with replacement.\n\nFor information on the ``elements`` and ``length`` arguments, please refer to\n:meth:`random_elements() <faker.providers.BaseProvider.random_elements>` which\nis used under the hood with the ``unique`` argument explicitly set to ``False``.\n\n:sample: elements=('a', 'b', 'c', 'd')\n:sample: elements=('a', 'b', 'c', 'd'), length=10\n:sample: elements=OrderedDict([\n             (\"a\", 0.45),\n             (\"b\", 0.35),\n             (\"c\", 0.15),\n             (\"d\", 0.05),\n         ])\n:sample: elements=OrderedDict([\n             (\"a\", 0.45),\n             (\"b\", 0.35),\n             (\"c\", 0.15),\n             (\"d\", 0.05),\n         ]), length=20",
  "random_digit": "Generate a random digit (0 to 9).",
  "random_digit_above_two": "Generate a random digit above value two (2 to 9).",
  "random_digit_not_null": "Generate a random non-zero digit (1 to 9).",
  "random_digit_not_null_or_empty": "Generate a random non-zero digit (1 to 9) or an empty string.\n\nThis method will return an empty string 50% of the time,\nand each digit has a 1/18 chance of being generated.",
  "random_digit_or_empty": "Generate a random digit (0 to 9) or an empty string.\n\nThis method will return an empty string 50% of the time,\nand each digit has a 1/20 chance of being generated.",
  "random_element": "Generate a randomly sampled object from ``elements``.\n\nFor information on the ``elements`` argument, please refer to\n:meth:`random_elements() <faker.providers.BaseProvider.random_elements>` which\nis used under the hood with the ``unique`` argument set to ``False`` and the\n``length`` argument set to ``1``.\n\n:sample: elements=('a', 'b', 'c', 'd')\n:sample size=10: elements=OrderedDict([\n             (\"a\", 0.45),\n             (\"b\", 0.35),\n             (\"c\", 0.15),\n             (\"d\", 0.05),\n         ])",
  "random_elements": "Generate a list of randomly sampled objects from ``elements``.\n\nSet ``unique`` to ``False`` for random sampling with replacement, and set ``unique`` to\n``True`` for random sampling without replacement.\n\nIf ``length`` is set to ``None`` or is omitted, ``length`` will be set to a random\ninteger from 1 to the size of ``elements``.\n\nThe value of ``length`` cannot be greater than the number of objects\nin ``elements`` if ``unique`` is set to ``True``.\n\nThe value of ``elements`` can be any sequence type (``list``, ``tuple``, ``set``,\n``string``, etc) or an ``OrderedDict`` type. If it is the latter, the keys will be\nused as the objects for sampling, and the values will be used as weighted probabilities\nif ``unique`` is set to ``False``. For example:\n\n.. code-block:: python\n\n    # Random sampling with replacement\n    fake.random_elements(\n        elements=OrderedDict([\n            (\"variable_1\", 0.5),        # Generates \"variable_1\" 50% of the time\n            (\"variable_2\", 0.2),        # Generates \"variable_2\" 20% of the time\n            (\"variable_3\", 0.2),        # Generates \"variable_3\" 20% of the time\n            (\"variable_4\": 0.1),        # Generates \"variable_4\" 10% of the time\n        ]), unique=False\n    )\n\n    # Random sampling without replacement (defaults to uniform distribution)\n    fake.random_elements(\n        elements=OrderedDict([\n            (\"variable_1\", 0.5),\n            (\"variable_2\", 0.2),\n            (\"variable_3\", 0.2),\n            (\"variable_4\": 0.1),\n        ]), unique=True\n    )\n\n:sample: elements=('a', 'b', 'c', 'd'), unique=False\n:sample: elements=('a', 'b', 'c', 'd'), unique=True\n:sample: elements=('a', 'b', 'c', 'd'), length=10, unique=False\n:sample: elements=('a', 'b', 'c', 'd'), length=4, unique=True\n:sample: elements=OrderedDict([\n                (\"a\", 0.45),\n                (\"b\", 0.35),\n               (\"c\", 0.15),\n               (\"d\", 0.05),\n           ]), length=20, unique=False\n:sample: elements=OrderedDict([\n               (\"a\", 0.45),\n               (\"b\", 0.35),\n               (\"c\", 0.15),\n               (\"d\", 0.05),\n           ]), unique=True",
  "random_int": "Generate a random integer between two integers ``min`` and ``max`` inclusive\nwhile observing the provided ``step`` value.\n\nThis method is functionally equivalent to randomly sampling an integer\nfrom the sequence ``range(min, max + 1, step)``.\n\n:sample: min=0, max=15\n:sample: min=0, max=15, step=3",
  "random_letter": "Generate a random ASCII letter (a-z and A-Z).",
  "random_letters": "Generate a list of random ASCII letters (a-z and A-Z) of the specified ``length``.\n\n:sample: length=10",
  "random_lowercase_letter": "Generate a random lowercase ASCII letter (a-z).",
  "random_number": "Generate a random integer according to the following rules:\n\n- If ``digits`` is ``None`` (default), its value will be set to a random\n  integer from 1 to 9.\n- If ``fix_len`` is ``False`` (default), all integers that do not exceed\n  the number of ``digits`` can be generated.\n- If ``fix_len`` is ``True``, only integers with the exact number of\n  ``digits`` can be generated.\n\n:sample: fix_len=False\n:sample: fix_len=True\n:sample: digits=3\n:sample: digits=3, fix_len=False\n:sample: digits=3, fix_len=True",
  "random_sample": "Generate a list of objects randomly sampled from ``elements`` without replacement.\n\nFor information on the ``elements`` and ``length`` arguments, please refer to\n:meth:`random_elements() <faker.providers.BaseProvider.random_elements>` which\nis used under the hood with the ``unique`` argument explicitly set to ``True``.\n\n:sample: elements=('a', 'b', 'c', 'd', 'e', 'f')\n:sample: elements=('a', 'b', 'c', 'd', 'e', 'f'), length=3",
  "random_uppercase_letter": "Generate a random uppercase ASCII letter (A-Z).",
  "randomize_nb_elements": "Generate a random integer near ``number`` according to the following rules:\n\n- If ``le`` is ``False`` (default), allow generation up to 140% of ``number``.\n  If ``True``, upper bound generation is capped at 100%.\n- If ``ge`` is ``False`` (default), allow generation down to 60% of ``number``.\n  If ``True``, lower bound generation is capped at 100%.\n- If a numerical value for ``min`` is provided, generated values less than ``min``\n  will be clamped at ``min``.\n- If a numerical value for ``max`` is provided, generated values greater than\n  ``max`` will be clamped at ``max``.\n- If both ``le`` and ``ge`` are ``True``, the value of ``number`` will automatically\n  be returned, regardless of the values supplied for ``min`` and ``max``.\n\n:sample: number=100\n:sample: number=100, ge=True\n:sample: number=100, ge=True, min=120\n:sample: number=100, le=True\n:sample: number=100, le=True, max=80\n:sample: number=79, le=True, ge=True, min=80",
  "rgb_color": "Generate a color formatted as a comma-separated RGB value.",
  "rgb_css_color": "Generate a color formatted as a CSS rgb() function.",
  "ripe_id": "Returns RIPE Organization ID\nhttps://www.ripe.net/manage-ips-and-asns/db/support/organisation-object-in-the-ripe-database\n\n:rtype: str",
  "safari": "Generate a Safari web browser user agent string.",
  "safe_color_name": "Generate a web-safe color name.",
  "safe_hex_color": "Generate a web-safe color formatted as a hex triplet.",
  "seed_instance": "Creates and seeds a new `random.Random` object for each factory\n\n:param seed: seed value",
  "seed_locale": "Creates and seeds a new `random.Random` object for the factory of the specified locale\n\n:param locale: locale string\n:param seed: seed value",
  "sentence": "Generate a sentence.\n\nThe ``nb_words`` argument controls how many words the sentence will\ncontain, and setting ``variable_nb_words`` to ``False`` will generate\nthe exact amount, while setting it to ``True`` (default) will generate\na random amount (+/-40%, minimum of 1) using |randomize_nb_elements|.\n\nUnder the hood, |words| is used to generate the words, so the argument\n``ext_word_list`` works in the same way here as it would in that method.\n\n:sample: nb_words=10\n:sample: nb_words=10, variable_nb_words=False\n:sample: nb_words=10, ext_word_list=['abc', 'def', 'ghi', 'jkl']\n:sample: nb_words=10, variable_nb_words=True,\n         ext_word_list=['abc', 'def', 'ghi', 'jkl']",
  "sentences": "Generate a list of sentences.\n\nThis method uses |sentence| under the hood to generate sentences, and\nthe ``nb`` argument controls exactly how many sentences the list will\ncontain. The ``ext_word_list`` argument works in exactly the same way\nas well.\n\n:sample:\n:sample: nb=5\n:sample: nb=5, ext_word_list=['abc', 'def', 'ghi', 'jkl']",
  "set_arguments": "Creates an argument group, with an individual argument or a dictionary\nof arguments. The argument groups is used to apply arguments to tokens,\nwhen using the generator.parse() method. To further manage argument\ngroups, use get_arguments() and del_arguments() methods.\n\ngenerator.set_arguments('small', 'max_value', 10)\ngenerator.set_arguments('small', {'min_value': 5, 'max_value': 10})",
  "set_formatter": "This method adds a provider method to generator.\nOverride this method to add some decoration or logging stuff.",
  "sha1": "Generate a random SHA-1 hash.\n\nIf ``raw_output`` is ``False`` (default), a hexadecimal string representation of the SHA-1 hash\nwill be returned. If ``True``, a ``bytes`` object representation will be returned instead.\n\n:sample: raw_output=False\n:sample: raw_output=True",
  "sha256": "Generate a random SHA-256 hash.\n\nIf ``raw_output`` is ``False`` (default), a hexadecimal string representation of the SHA-256 hash\nwill be returned. If ``True``, a ``bytes`` object representation will be returned instead.\n\n:sample: raw_output=False\n:sample: raw_output=True",
  "simple_profile": "Generates a basic profile with personal information",
  "slug": "Django algorithm",
  "ssn": "Generate a random United States Taxpayer Identification Number of the specified type.\n\nIf no type is specified, a US SSN is returned.",
  "state_abbr": ":returns: A random two-letter USPS postal code\n\nBy default, the resulting code may abbreviate any of the fifty states,\nfive US territories, or three freely-associating sovereign states.\n\n:param include_territories: If True, territories will be included.\n    If False, US territories will be excluded.\n:param include_freely_associated_states: If True, freely-associated states will be included.\n    If False, sovereign states in free association with the US will be excluded.",
  "street_address": ":example: '791 Crist Parks'",
  "street_name": ":example: 'Crist Parks'",
  "street_suffix": ":example: 'Avenue'",
  "swift": "Generate a SWIFT code.\n\nSWIFT codes, reading from left to right, are composed of a 4 alphabet\ncharacter bank code, a 2 alphabet character country code, a 2\nalphanumeric location code, and an optional 3 alphanumeric branch code.\nThis means SWIFT codes can only have 8 or 11 characters, so the value of\n``length`` can only be ``None`` or the integers ``8`` or ``11``. If the\nvalue is ``None``, then a value of ``8`` or ``11`` will randomly be\nassigned.\n\nBecause all 8-digit SWIFT codes already refer to the primary branch or\noffice, the ``primary`` argument only has an effect if the value of\n``length`` is ``11``. If ``primary`` is ``True`` and ``length`` is\n``11``, the 11-digit SWIFT codes generated will always end in ``'XXX'``\nto denote that they belong to primary branches/offices.\n\nFor extra authenticity, localized providers may opt to include SWIFT\nbank codes, location codes, and branch codes used in their respective\nlocales. If ``use_dataset`` is ``True``, this method will generate SWIFT\ncodes based on those locale-specific codes if included. If those codes\nwere not included, then it will behave as if ``use_dataset`` were\n``False``, and in that mode, all those codes will just be randomly\ngenerated as per the specification.\n\n:sample:\n:sample: length=8\n:sample: length=8, use_dataset=True\n:sample: length=11\n:sample: length=11, primary=True\n:sample: length=11, use_dataset=True\n:sample: length=11, primary=True, use_dataset=True",
  "swift11": "Generate an 11-digit SWIFT code.\n\nThis method uses |swift| under the hood with the ``length`` argument set\nto ``11``. If ``primary`` is set to ``True``, the SWIFT code will always\nend with ``'XXX'``. All 11-digit SWIFT codes use this convention to\nrefer to the primary branch/office.\n\n:sample:\n:sample: use_dataset=True",
  "swift8": "Generate an 8-digit SWIFT code.\n\nThis method uses |swift| under the hood with the ``length`` argument set\nto ``8`` and with the ``primary`` argument omitted. All 8-digit SWIFT\ncodes already refer to the primary branch/office.\n\n:sample:\n:sample: use_dataset=True",
  "tar": "Generate a bytes object containing a random valid tar file.\n\nThe number and sizes of files contained inside the resulting archive can be controlled\nusing the following arguments:\n\n- ``uncompressed_size`` - the total size of files before compression, 16 KiB by default\n- ``num_files`` - the number of files archived in resulting zip file, 1 by default\n- ``min_file_size`` - the minimum size of each file before compression, 4 KiB by default\n\nNo compression is used by default, but setting ``compression`` to one of the values listed\nbelow will use the corresponding compression type.\n\n- ``'bzip2'`` or ``'bz2'`` for BZIP2\n- ``'lzma'`` or ``'xz'`` for LZMA\n- ``'gzip'`` or ``'gz'`` for GZIP\n\n:sample: uncompressed_size=256, num_files=4, min_file_size=32\n:sample: uncompressed_size=256, num_files=32, min_file_size=4, compression='bz2'",
  "text": "Generate a text string.\n\nThe ``max_nb_chars`` argument controls the approximate number of\ncharacters the text string will have, and depending on its value, this\nmethod may use either |words|, |sentences|, or |paragraphs| for text\ngeneration. The ``ext_word_list`` argument works in exactly the same way\nit would in any of those methods.\n\n:sample: max_nb_chars=20\n:sample: max_nb_chars=80\n:sample: max_nb_chars=160\n:sample: ext_word_list=['abc', 'def', 'ghi', 'jkl']",
  "texts": "Generate a list of text strings.\n\nThe ``nb_texts`` argument controls how many text strings the list will\ncontain, and this method uses |text| under the hood for text generation,\nso the two remaining arguments, ``max_nb_chars`` and ``ext_word_list``\nwill work in exactly the same way as well.\n\n:sample: nb_texts=5\n:sample: nb_texts=5, max_nb_chars=50\n:sample: nb_texts=5, max_nb_chars=50,\n         ext_word_list=['abc', 'def', 'ghi', 'jkl']",
  "time": "Get a time string (24h format by default)\n\n:param pattern: format\n:param end_datetime: A ``DateParseType``. Defaults to the current date and time\n\n:sample:\n:sample: pattern='%I:%M %p'",
  "time_delta": "Get a random timedelta object of duration between the current date and time and `end_datetime`\n\n:param end_datetime: A ``DateParseType``. Defaults to the current date and time\n\n:sample:\n:sample: end_datetime='+30h'",
  "time_object": "Get a time object\n\n:param end_datetime: A ``DateParseType``. Defaults to the current date and time\n\n:sample:\n:sample: end_datetime='+1h'",
  "time_series": "Returns a generator yielding tuples of ``(<datetime>, <value>)``.\n\nThe data points will start at ``start_date``, and be at every time interval specified by\n``precision``.\n\n:param start_date: A ``DateParseType``. Defaults to ``\"-30d\"``\n:param end_date: A ``DateParseType``. Defaults to ``\"now\"``\n:param precision: A float representing the time interval between data points.\nDefaults to 1/30th of the time\n:param distrib: A callable that accepts a datetime object and returns a value.\nDefaults to a uniform distribution\n:param tzinfo: timezone, instance of datetime.tzinfo subclass\n\n:sample:",
  "timezone": ":sample:",
  "tsv": "Generate random tab-separated values.\n\nFor more information on the different arguments of this method, please refer to\n:meth:`dsv() <faker.providers.misc.Provider.dsv>` which is used under the hood.\n\n:sample: data_columns=('{{name}}', '{{address}}'), num_rows=10, include_row_ids=False\n:sample: header=('Name', 'Address', 'Favorite Color'),\n        data_columns=('{{name}}', '{{address}}', '{{safe_color_name}}'),\n        num_rows=10, include_row_ids=True",
  "unix_device": "Generate a Unix device file name.\n\nIf ``prefix`` is ``None``, a random prefix will be used. The list of\nvalid prefixes include: ``'sd'``, ``'vd'``, and ``'xvd'``.\n\n:sample:\n:sample: prefix='mmcblk'",
  "unix_partition": "Generate a Unix partition name.\n\nThis method uses |unix_device| under the hood to create a device file\nname with the specified ``prefix``.\n\n:sample:\n:sample: prefix='mmcblk'",
  "unix_time": "Get a timestamp between January 1, 1970 and now, unless passed\nexplicit ``start_datetime`` or `end_datetime` values.\n\nOn Windows, the decimal part is always 0.\n\n:param end_datetime: A ``DateParseType``. Defaults to the UNIX epoch\n:param start_datetime: A ``DateParseType``. Defaults to the current date and time\n\n:sample:",
  "upc_a": "Generate a 12-digit UPC-A barcode.\n\nThe value of ``upc_ae_mode`` controls how barcodes will be generated. If\n``False`` (default), barcodes are not guaranteed to have a UPC-E\nequivalent. In this mode, the method uses |EnUsBarcodeProvider.ean13|\nunder the hood, and the values of ``base`` and ``number_system_digit``\nwill be ignored.\n\nIf ``upc_ae_mode`` is ``True``, the resulting barcodes are guaranteed to\nhave a UPC-E equivalent, and the values of ``base`` and\n``number_system_digit`` will be used to control what is generated.\n\nUnder this mode, ``base`` is expected to have a 6-digit string value. If\nany other value is supplied, a random 6-digit string will be used\ninstead. As for ``number_system_digit``, the expected value is a ``0``\nor a ``1``. If any other value is provided, this method will randomly\nchoose from the two.\n\n.. important::\n   When ``upc_ae_mode`` is enabled, you might encounter instances where\n   different values of ``base`` (e.g. ``'120003'`` and ``'120004'``)\n   produce the same UPC-A barcode. This is normal, and the reason lies\n   within the whole conversion process. To learn more about this and\n   what ``base`` and ``number_system_digit`` actually represent, please\n   refer to |EnUsBarcodeProvider.upc_e|.\n\n:sample:\n:sample: upc_ae_mode=True, number_system_digit=0\n:sample: upc_ae_mode=True, number_system_digit=1\n:sample: upc_ae_mode=True, base='123456', number_system_digit=0\n:sample: upc_ae_mode=True, base='120003', number_system_digit=0\n:sample: upc_ae_mode=True, base='120004', number_system_digit=0",
  "upc_e": "Generate an 8-digit UPC-E barcode.\n\nUPC-E barcodes can be expressed in 6, 7, or 8-digit formats, but this\nmethod uses the 8 digit format, since it is trivial to convert to the\nother two formats. The first digit (starting from the left) is\ncontrolled by ``number_system_digit``, and it can only be a ``0`` or a\n``1``. The last digit is the check digit that is inherited from the\nUPC-E barcode's UPC-A equivalent. The middle six digits are collectively\nreferred to as the ``base`` (for a lack of a better term).\n\nOn that note, this method uses ``base`` and ``number_system_digit`` to\nfirst generate a UPC-A barcode for the check digit, and what happens\nnext depends on the value of ``safe_mode``. The argument ``safe_mode``\nexists, because there are some UPC-E values that share the same UPC-A\nequivalent. For example, any UPC-E barcode of the form ``abc0000d``,\n``abc0003d``, and ``abc0004d`` share the same UPC-A value\n``abc00000000d``, but that UPC-A value will only convert to ``abc0000d``\nbecause of (a) how UPC-E is just a zero-suppressed version of UPC-A and\n(b) the rules around the conversion.\n\nIf ``safe_mode`` is ``True`` (default), this method performs another set\nof conversions to guarantee that the UPC-E barcodes generated can be\nconverted to UPC-A, and that UPC-A barcode can be converted back to the\noriginal UPC-E barcode. Using the example above, even if the bases\n``120003`` or ``120004`` are used, the resulting UPC-E barcode will\nalways use the base ``120000``.\n\nIf ``safe_mode`` is ``False``, then the ``number_system_digit``,\n``base``, and the computed check digit will just be concatenated\ntogether to produce the UPC-E barcode, and attempting to convert the\nbarcode to UPC-A and back again to UPC-E will exhibit the behavior\ndescribed above.\n\n:sample:\n:sample: base='123456'\n:sample: base='123456', number_system_digit=0\n:sample: base='123456', number_system_digit=1\n:sample: base='120000', number_system_digit=0\n:sample: base='120003', number_system_digit=0\n:sample: base='120004', number_system_digit=0\n:sample: base='120000', number_system_digit=0, safe_mode=False\n:sample: base='120003', number_system_digit=0, safe_mode=False\n:sample: base='120004', number_system_digit=0, safe_mode=False",
  "uri": ":param schemes: a list of strings to use as schemes, one will chosen randomly.\n    If None, it will generate http and https uris.\n    Passing an empty list will result in schemeless uri generation like \"://domain.com/index.html\".\n:param deep: an integer specifying how many path components the URI should have..\n:return: a random url string.",
  "url": ":param schemes: a list of strings to use as schemes, one will chosen randomly.\n    If None, it will generate http and https urls.\n    Passing an empty list will result in schemeless url generation like \"://domain.com\".\n:return: a random url string.",
  "user_agent": "Generate a random web browser user agent string.",
  "uuid4": "Generate a random UUID4 object and cast it to another type if specified using a callable ``cast_to``.\n\nBy default, ``cast_to`` is set to ``str``.\n\nMay be called with ``cast_to=None`` to return a full-fledged ``UUID``.\n\n:sample:\n:sample: cast_to=None",
  "vin": "Generate vin number.",
  "windows_platform_token": "Generate a Windows platform token used in user agent strings.",
  "word": "Generate a word.\n\nThis method uses |words| under the hood with the ``nb`` argument set to\n``1`` to generate the result.\n\n:sample:\n:sample: ext_word_list=['abc', 'def', 'ghi', 'jkl']",
  "words": "Generate a tuple of words.\n\nThe ``nb`` argument controls the number of words in the resulting list,\nand if ``ext_word_list`` is provided, words from that list will be used\ninstead of those from the locale provider's built-in word list.\n\nif ``word_list`` is not provided, the method will use a default value of None,\nwhich will result in the method calling the ``get_words_list`` method to get the\nword list. If ``word_list`` is provided, the method will use the provided list.\n\nIf ``unique`` is ``True``, this method will return a list containing\nunique words. Under the hood, |random_sample| will be used for sampling\nwithout replacement. If ``unique`` is ``False``, |random_choices| is\nused instead, and the list returned may contain duplicates.\n\n:sample:\n:sample: nb=5\n:sample: nb=5, ext_word_list=['abc', 'def', 'ghi', 'jkl']\n:sample: nb=4, ext_word_list=['abc', 'def', 'ghi', 'jkl'], unique=True",
  "xml": "Returns some XML.\n\n:nb_elements: number of elements for dictionary\n:variable_nb_elements: is use variable number of elements for dictionary\n:value_types: type of dictionary values\n\nNote: this provider required xmltodict library installed",
  "year": ":sample:",
  "zip": "Generate a bytes object containing a random valid zip archive file.\n\nThe number and sizes of files contained inside the resulting archive can be controlled\nusing the following arguments:\n\n- ``uncompressed_size`` - the total size of files before compression, 16 KiB by default\n- ``num_files`` - the number of files archived in resulting zip file, 1 by default\n- ``min_file_size`` - the minimum size of each file before compression, 4 KiB by default\n\nNo compression is used by default, but setting ``compression`` to one of the values listed\nbelow will use the corresponding compression type.\n\n- ``'bzip2'`` or ``'bz2'`` for BZIP2\n- ``'lzma'`` or ``'xz'`` for LZMA\n- ``'deflate'``, ``'gzip'``, or ``'gz'`` for GZIP\n\n:sample: uncompressed_size=256, num_files=4, min_file_size=32\n:sample: uncompressed_size=256, num_files=32, min_file_size=4, compression='bz2'"
}
